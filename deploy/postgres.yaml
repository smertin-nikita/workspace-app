apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-configmap
data:
  init-users-dbs.sh: |
    #!/bin/bash -x
    
    set -e

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE USER $AUTHENTICATION_USER WITH PASSWORD '$AUTHENTICATION_PASSWORD';
    CREATE DATABASE $AUTHENTICATION_DB OWNER $AUTHENTICATION_USER;
    EOSQL
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: workspace-postgresql
  namespace: "workspace-ns"
  labels:
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: postgresql
spec:
  serviceName: postgres
  revisionHistoryLimit: 10
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: workspace
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: workspace
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: postgresql
    spec:
      terminationGracePeriodSeconds: 10

      automountServiceAccountToken: false
#      serviceAccountName: workspace-postgresql
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: workspace
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: postgresql
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - name: postgresql
          image: postgres:17
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POSTGRES_USER
              value: "admin"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "postgres"
            - name: AUTHENTICATION_DB
              value: authentication_db
            - name: AUTHENTICATION_USER
              value: authentication_user
            - name: AUTHENTICATION_PASSWORD
              value: password
          ports:
            - name: postgresql
              containerPort: 5432
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-init
          configMap:
            name: postgresql-configmap
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      namespace: "workspace-ns"
      labels:
        app.kubernetes.io/instance: workspace
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: postgresql
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 3Gi
      selector:
        matchLabels:
          app.kubernetes.io/instance: workspace
          app.kubernetes.io/name: postgresql
          app.kubernetes.io/component: postgresql
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: "workspace-ns"
  labels:
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: postgresql
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "postgresql"
      port: 5432
      targetPort: postgresql
  selector:
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: postgresql
