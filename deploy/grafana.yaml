apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-grafana
  namespace: workspace-ns
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/version: "11.3.0"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: workspace
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: workspace
      annotations:
        checksum/config: 3bffc3e0a5d4725cb77237a4db7caf2e873baecac32732ea93bc3ef5c042fc66
        checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
        checksum/secret: bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f
        kubectl.kubernetes.io/default-container: grafana
    spec:

      serviceAccountName: workspace-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:11.3.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: dashboards-default
              mountPath: "/var/lib/grafana/dashboards/default"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: "dashboardproviders.yaml"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: workspace-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: workspace-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: workspace-grafana
        - name: dashboards-default
          configMap:
            name: workspace-grafana-dashboards
        - name: storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: workspace-grafana
  namespace: workspace-ns
  labels:
    helm.sh/chart: grafana-8.6.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/version: "11.3.0"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: workspace
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: workspace-grafana
  namespace: workspace-ns
  labels:
    helm.sh/chart: grafana-8.6.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: workspace
    app.kubernetes.io/version: "11.3.0"
  annotations:
    nginx.ingress.kubernetes.io/app-root: "/grafana"
spec:
  ingressClassName: nginx
  rules:
    - host: "grafana.arch.homework"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: workspace-grafana
                port:
                  number: 80
